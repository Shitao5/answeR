---
title: "答疑汇总"
author: shitao
date: "`r Sys.Date()`"
format:
  html:
    smooth-scroll: true
    link-external-icon: true
    link-external-newwindow: true
toc: true
number-sections: true
knitr: 
  opts_chunk: 
    cache: true
    fig.align: "center"
    out.width: "70%"
---

```{r}
#| message: false
library(tidyverse)
```


# 正则表达式

## 零宽断言

```{r}
# 舍去零宽断言符号
str_extract("sdfs--", ".*?(?=-)")
```

```{r}
# 提取 P 前面的字符
a <- c("H11A1PNIO", "H1A1PNIO")
str_extract(a, ".*(?=P)")
```

```{r}
# 提取 Melbourne
x <- "Stamford Plaza, 111 Little Conllins St, Melbourne Vic 3000" 
x %>% 
  str_extract("(?<=,)[^,]*$") %>% 
  str_extract("(?<= )\\w+")
```



## 字母与数字分割

```{r}
tibble(test = c("MG1", "MGW1")) %>% 
  mutate(words = str_extract(test, "[:alpha:]+"),
    digits = str_extract(test, "\\d+"))
```

# Quarto

## 中文 PDF 输出

在 YAML 中加上：

```yaml
include-in-header: 
  text: 
    \usepackage{ctex}
```

# tidyverse

## dplyr + tidyr

### 拆分行为多列

```{r}
tibble(x = 1:2,
       y = c("a, b, c", "a, d")) %>% 
  separate_rows(y, sep = ", ")
```

### rowwise()

计算每行 `,` 前的数的和除以 `,` 后的数的和：

```{r}
data <- tribble(~A , ~B, ~C,
               "12,0", "21,2", "36,4",
               "4,2", "3,0", "2,0",
               "0,2", "0,0", "1,0")

data %>% 
  mutate(across(1:3, ~ str_split(.x, ",")),
         across(1:3, ~ map(.x, as.numeric))) %>% 
  rowwise() %>% 
  mutate(res = sum(A[1], B[1], C[1])/ sum(A[2], B[2], C[2]))
```

## ggplot2

### 主题

```{r}
theme_set(theme_bw())

ggplot(mpg, aes(cty, displ)) +
  geom_point()
```

### 组合图

利用字符串拼接成所需执行代码：

```{r}
library(patchwork)

p1 <- ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy))

p2 <- ggplot(mpg) + 
  geom_bar(aes(x = as.character(year), fill = drv), position = "dodge") + 
  labs(x = "year")

p3 <- ggplot(mpg) + 
  geom_density(aes(x = hwy, fill = drv), colour = NA) + 
  facet_grid(rows = vars(drv))

p4 <- ggplot(mpg) + 
  stat_summary(aes(x = drv, y = hwy, fill = drv), geom = "col", fun.data = mean_se) +
  stat_summary(aes(x = drv, y = hwy), geom = "errorbar", fun.data = mean_se, width = 0.5)

my_list <- list(p1, p2, p3, p4)

cat(paste0("my_list[[", 1:length(my_list), "]]"),
                 sep = " / ", file = "my_list") # 生成一个 connection
eval(parse(file = "my_list")) # 运行该 connection
```

# 杂七杂八 | 奇淫技巧

## 批量建模

```{r}
y <- paste0(c("mpg", "disp", "hp"), c(" ~ wt"))
map(y, ~lm(.x, data = mtcars))
```

## 修改源码

```{r}
#| eval: false
library(rstatix)
trace(rstatix:::as_tidy_cor, edit = T) # 修改后保存
rstatix::cor_test(iris, Sepal.Length, Petal.Length) # 可以把调整 cor 输出为 4 位
```

## 执行字符串

```{r}
text = "c(1:10)"
eval(parse(text = text))
```

```{r}
eval(parse(text = "1/2"))
```

## 缺失值统计

```{r}
data <- tibble(x = c(rep(letters[1:3], 2), NA, NA))
data
data[data$x == "a",] # 筛选时缺失值留在表格中
table(data$x == "a") # 缺失值没有被统计进去
```

# 其他包

## psych

描述性统计：

```{r}
library(psych)

psych::describe(iris, quant = c(.25, .75))  # 不支持 dplyr 的 group_by()
```

```{r}
#| eval: false
# 分组统计
psych::describeBy(iris, group = iris$Species, quant = c(.25, .75))
```

<script src="https://utteranc.es/client.js"
        repo="Shitao5/answeR"
        issue-term="pathname"
        theme="github-light"
        crossorigin="anonymous"
        async>
</script>